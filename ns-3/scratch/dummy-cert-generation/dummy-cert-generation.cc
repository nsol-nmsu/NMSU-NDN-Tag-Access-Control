#include <iostream>
#include "ndn-cxx/util/io.hpp"
#include "ndn-cxx/security/validator.hpp"
#include "ndn-cxx/security/identity-certificate.hpp"
#include "ns3/ndnSIM/helper/ndn-stack-helper.hpp"

static const uint8_t DUMMY_SIGNATURE[] =
  {0x17, 0xfd, 0x01, 0x00, 0x93, 0x15, 0x09, 0x49, 0x79, 0x9e, 0xb7, 0x9c, 0xd3, 0xc1, 0xbf, 0x61,
   0x89, 0xd5, 0xd9, 0xca, 0xf2, 0xb0, 0x14, 0xae, 0x72, 0x7c, 0x1f, 0x8f, 0xf5, 0xb1, 0x70, 0xd6,
   0x9b, 0x8f, 0xf8, 0xd7, 0x2d, 0xbc, 0x92, 0x6f, 0x7d, 0x77, 0x96, 0x46, 0xea, 0xd4, 0x7d, 0x90,
   0xbc, 0x7a, 0xeb, 0xe2, 0x03, 0x93, 0xb1, 0xd2, 0x62, 0xec, 0x9d, 0xff, 0x9c, 0x9c, 0x2a, 0x14,
   0x7d, 0x23, 0xca, 0x29, 0x3d, 0x15, 0x1a, 0x40, 0x42, 0x2c, 0x59, 0x33, 0x8a, 0xf7, 0xc0, 0x6b,
   0xc4, 0x9c, 0xf3, 0xc4, 0x99, 0xa4, 0x1a, 0x60, 0xf5, 0x28, 0x7d, 0x4c, 0xef, 0x43, 0x7d, 0xbd,
   0x7d, 0x00, 0x51, 0xee, 0x41, 0xf5, 0x25, 0x80, 0xce, 0xe6, 0x64, 0x4f, 0x75, 0x54, 0xf3, 0xb2,
   0x99, 0x9a, 0x0f, 0x93, 0x9a, 0x28, 0x1d, 0xfe, 0x12, 0x8a, 0xe0, 0xc1, 0x02, 0xeb, 0xa4, 0x35,
   0x52, 0x88, 0xac, 0x44, 0x1a, 0x44, 0x82, 0x97, 0x4f, 0x5f, 0xa8, 0xd8, 0x9f, 0x67, 0x38, 0xa8,
   0x64, 0xb6, 0x62, 0x99, 0xbd, 0x96, 0x3c, 0xf5, 0x86, 0x09, 0x5c, 0x97, 0x6b, 0x8f, 0xae, 0xe0,
   0x60, 0xe7, 0x23, 0x98, 0x6a, 0xee, 0xc1, 0xb0, 0x14, 0xbe, 0x46, 0x2c, 0xfb, 0xa7, 0x27, 0x73,
   0xe4, 0xf3, 0x26, 0x33, 0xba, 0x99, 0xd4, 0x01, 0x38, 0xa8, 0xf2, 0x9e, 0x87, 0xe0, 0x71, 0x0b,
   0x25, 0x44, 0x07, 0x35, 0x88, 0xab, 0x67, 0x27, 0x56, 0x0e, 0xb5, 0xb5, 0xe8, 0x27, 0xb4, 0x49,
   0xdc, 0xb8, 0x48, 0x31, 0xff, 0x99, 0x48, 0xab, 0x11, 0xb4, 0xa0, 0xdf, 0x8a, 0x6d, 0xff, 0x43,
   0x69, 0x32, 0xa7, 0xbc, 0x63, 0x9d, 0x0f, 0xe0, 0x95, 0x34, 0x36, 0x25, 0x4b, 0x3e, 0x36, 0xbd,
   0x81, 0x91, 0x0b, 0x91, 0x9f, 0x3a, 0x04, 0xa2, 0x44, 0x28, 0x19, 0xa1, 0x38, 0x21, 0x4f, 0x25,
   0x59, 0x8a, 0x48, 0xc2};

using namespace std;
using namespace ndn;

int main()
{
	ofstream of( "dummy-cert.txt" );

	Name name("/dummy/key/KEY/ksk-1418600391050/ID-CERT/%FD%00%00%01JK%2C%22%5E");
	vector<int> oid_stuff = {2, 5, 4, 41};
  CertificateSubjectDescription sdesc( OID( oid_stuff), "/dummy/key/ksk-1418600391050" );

	char keystr[] = "0\202\001 0\r\006\t*\206H\206\367\r\001\001\001\005\000\003\202\001\r\000\060\202\001\b\002\202\001\001\000\305G῞\tv\a\252\323\t\220\376\273\275{\017\301\310\"\234A\254\032e?W\233\332?\260ơ\301\017Hl\334v\017>\t\221\351Zƶ\273\370\062\064@\375\351a\313obI\377\217\n\271\313w\016вP\a\351\037\377\261mH\241\275\250\021/\361\252\252\346\020յ\340T*,\224^\240\346C6\336\372d\334'\326\035\017\273\"\027Wa\256\071\314ܢ\365Ɨ\027\273t\032W\231\277#\247\nW\006+'\032w$\252\372\223\232G\207\022e<\214\224\273\272\024\336AV\355\261\352\332\352\270y\317`\005p\212\300\016\270!V\025BmFT9>WL+\356\234=\250>\220\065\256\336\063:\302\060N\257|\315\035y(\224k\204\350\275BC@P\354\063o;\221\211\267\265\233\273\212\342s\230\340\272\336\331xa\227r\253#\240\236\244\253Pa5\262\203G|\272$#]ǅ,1\242N\347\271\002\001\021";
	//CryptoPP::StringSource source(, true);
	PublicKey pkey( (uint8_t*)keystr, 292);
	//pkey.decode( source );

	IdentityCertificate cert;
	cert.setName( name );
	cert.setPublicKeyInfo( pkey );
	cert.addSubjectDescription( sdesc );
  security::KeyChain& keychain = ns3::ndn::StackHelper::getKeyChain();
	cert.encode();
	keychain.sign( cert );
	//Signature sig( SignatureInfo(tlv::SignatureSha256WithRsa), Block( DUMMY_SIGNATURE, sizeof( DUMMY_SIGNATURE )));
	//cert.setSignature( sig );
  Name pkn = keychain.getDefaultKeyNameForIdentity( "/dummy" );
  auto pk = keychain.getPublicKey( pkn );
  bool test = Validator::verifySignature( (Data&)cert, *pk );
	io::save<ndn::IdentityCertificate>( cert, of, io::BASE_64 );
	of.close();
}
